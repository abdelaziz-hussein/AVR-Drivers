
AVR_drivers_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000039a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000780  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000007b4  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a9 01 	call	0x352	; 0x352 <main>
  64:	0c 94 cb 01 	jmp	0x396	; 0x396 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_voidInit>:
#include "DIO_PRIV.h"
#include "DIO_CONFIG.h"
#include "DIO_INIT.h"

void DIO_voidInit(void)
{DDRA=ConcBit(DIO_DIR_Pin_7,DIO_DIR_Pin_6,DIO_DIR_Pin_5,DIO_DIR_Pin_4,DIO_DIR_Pin_3,DIO_DIR_Pin_2,DIO_DIR_Pin_1,DIO_DIR_Pin_0);
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	ea e3       	ldi	r30, 0x3A	; 58
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	8f ef       	ldi	r24, 0xFF	; 255
  7a:	80 83       	st	Z, r24
 DDRB=ConcBit(DIO_DIR_Pin_15,DIO_DIR_Pin_14,DIO_DIR_Pin_13,DIO_DIR_Pin_12,DIO_DIR_Pin_11,DIO_DIR_Pin_10,DIO_DIR_Pin_9,DIO_DIR_Pin_8);
  7c:	e7 e3       	ldi	r30, 0x37	; 55
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	80 83       	st	Z, r24
 DDRC=ConcBit(DIO_DIR_Pin_23,DIO_DIR_Pin_22,DIO_DIR_Pin_21,DIO_DIR_Pin_20,DIO_DIR_Pin_19,DIO_DIR_Pin_18,DIO_DIR_Pin_17,DIO_DIR_Pin_16);
  84:	e4 e3       	ldi	r30, 0x34	; 52
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	80 83       	st	Z, r24
 DDRD=ConcBit(DIO_DIR_Pin_31,DIO_DIR_Pin_30,DIO_DIR_Pin_29,DIO_DIR_Pin_28,DIO_DIR_Pin_27,DIO_DIR_Pin_26,DIO_DIR_Pin_25,DIO_DIR_Pin_24);
  8c:	e1 e3       	ldi	r30, 0x31	; 49
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	88 ef       	ldi	r24, 0xF8	; 248
  92:	80 83       	st	Z, r24
}
  94:	cf 91       	pop	r28
  96:	df 91       	pop	r29
  98:	08 95       	ret

0000009a <DIO_voidSetPin>:
void DIO_voidSetPin(u8 pin_num, u8 value)
{  if (0<=pin_num && pin_num<=7)
  9a:	df 93       	push	r29
  9c:	cf 93       	push	r28
  9e:	00 d0       	rcall	.+0      	; 0xa0 <DIO_voidSetPin+0x6>
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
  a4:	89 83       	std	Y+1, r24	; 0x01
  a6:	6a 83       	std	Y+2, r22	; 0x02
  a8:	89 81       	ldd	r24, Y+1	; 0x01
  aa:	88 30       	cpi	r24, 0x08	; 8
  ac:	80 f5       	brcc	.+96     	; 0x10e <DIO_voidSetPin+0x74>
		{ if(value==High)
  ae:	8a 81       	ldd	r24, Y+2	; 0x02
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	a1 f4       	brne	.+40     	; 0xdc <DIO_voidSetPin+0x42>
			{
				SetBit(PORTA,pin_num);
  b4:	ab e3       	ldi	r26, 0x3B	; 59
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	eb e3       	ldi	r30, 0x3B	; 59
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	48 2f       	mov	r20, r24
  c0:	89 81       	ldd	r24, Y+1	; 0x01
  c2:	28 2f       	mov	r18, r24
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 2e       	mov	r0, r18
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_voidSetPin+0x38>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	0a 94       	dec	r0
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_voidSetPin+0x34>
  d6:	84 2b       	or	r24, r20
  d8:	8c 93       	st	X, r24
  da:	cb c0       	rjmp	.+406    	; 0x272 <DIO_voidSetPin+0x1d8>
			}
			else if (value ==Low)
  dc:	8a 81       	ldd	r24, Y+2	; 0x02
  de:	88 23       	and	r24, r24
  e0:	09 f0       	breq	.+2      	; 0xe4 <DIO_voidSetPin+0x4a>
  e2:	c7 c0       	rjmp	.+398    	; 0x272 <DIO_voidSetPin+0x1d8>
			{
				ClrBit(PORTA,pin_num);
  e4:	ab e3       	ldi	r26, 0x3B	; 59
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	eb e3       	ldi	r30, 0x3B	; 59
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	48 2f       	mov	r20, r24
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	28 2f       	mov	r18, r24
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	02 2e       	mov	r0, r18
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_voidSetPin+0x68>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	0a 94       	dec	r0
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_voidSetPin+0x64>
 106:	80 95       	com	r24
 108:	84 23       	and	r24, r20
 10a:	8c 93       	st	X, r24
 10c:	b2 c0       	rjmp	.+356    	; 0x272 <DIO_voidSetPin+0x1d8>
			}
		}
	else if (8<=pin_num && pin_num<=15)
 10e:	89 81       	ldd	r24, Y+1	; 0x01
 110:	88 30       	cpi	r24, 0x08	; 8
 112:	c8 f1       	brcs	.+114    	; 0x186 <DIO_voidSetPin+0xec>
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	80 31       	cpi	r24, 0x10	; 16
 118:	b0 f5       	brcc	.+108    	; 0x186 <DIO_voidSetPin+0xec>
	{ if(value==High)
 11a:	8a 81       	ldd	r24, Y+2	; 0x02
 11c:	81 30       	cpi	r24, 0x01	; 1
 11e:	b9 f4       	brne	.+46     	; 0x14e <DIO_voidSetPin+0xb4>
		{
			SetBit(PORTB,pin_num-8);
 120:	a8 e3       	ldi	r26, 0x38	; 56
 122:	b0 e0       	ldi	r27, 0x00	; 0
 124:	e8 e3       	ldi	r30, 0x38	; 56
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	48 2f       	mov	r20, r24
 12c:	89 81       	ldd	r24, Y+1	; 0x01
 12e:	88 2f       	mov	r24, r24
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	9c 01       	movw	r18, r24
 134:	28 50       	subi	r18, 0x08	; 8
 136:	30 40       	sbci	r19, 0x00	; 0
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 2e       	mov	r0, r18
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_voidSetPin+0xaa>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	0a 94       	dec	r0
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_voidSetPin+0xa6>
 148:	84 2b       	or	r24, r20
 14a:	8c 93       	st	X, r24
 14c:	92 c0       	rjmp	.+292    	; 0x272 <DIO_voidSetPin+0x1d8>
		}
		else if (value ==Low)
 14e:	8a 81       	ldd	r24, Y+2	; 0x02
 150:	88 23       	and	r24, r24
 152:	09 f0       	breq	.+2      	; 0x156 <DIO_voidSetPin+0xbc>
 154:	8e c0       	rjmp	.+284    	; 0x272 <DIO_voidSetPin+0x1d8>
		{
			ClrBit(PORTB,pin_num-8);
 156:	a8 e3       	ldi	r26, 0x38	; 56
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	e8 e3       	ldi	r30, 0x38	; 56
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	48 2f       	mov	r20, r24
 162:	89 81       	ldd	r24, Y+1	; 0x01
 164:	88 2f       	mov	r24, r24
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	9c 01       	movw	r18, r24
 16a:	28 50       	subi	r18, 0x08	; 8
 16c:	30 40       	sbci	r19, 0x00	; 0
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	02 2e       	mov	r0, r18
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_voidSetPin+0xe0>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	0a 94       	dec	r0
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_voidSetPin+0xdc>
 17e:	80 95       	com	r24
 180:	84 23       	and	r24, r20
 182:	8c 93       	st	X, r24
 184:	76 c0       	rjmp	.+236    	; 0x272 <DIO_voidSetPin+0x1d8>
		}
	}
	else if (16<=pin_num && pin_num<=23)
 186:	89 81       	ldd	r24, Y+1	; 0x01
 188:	80 31       	cpi	r24, 0x10	; 16
 18a:	c8 f1       	brcs	.+114    	; 0x1fe <DIO_voidSetPin+0x164>
 18c:	89 81       	ldd	r24, Y+1	; 0x01
 18e:	88 31       	cpi	r24, 0x18	; 24
 190:	b0 f5       	brcc	.+108    	; 0x1fe <DIO_voidSetPin+0x164>
		{ if(value==High)
 192:	8a 81       	ldd	r24, Y+2	; 0x02
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	b9 f4       	brne	.+46     	; 0x1c6 <DIO_voidSetPin+0x12c>
			{
				SetBit(PORTC,pin_num-16);
 198:	a5 e3       	ldi	r26, 0x35	; 53
 19a:	b0 e0       	ldi	r27, 0x00	; 0
 19c:	e5 e3       	ldi	r30, 0x35	; 53
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	48 2f       	mov	r20, r24
 1a4:	89 81       	ldd	r24, Y+1	; 0x01
 1a6:	88 2f       	mov	r24, r24
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	9c 01       	movw	r18, r24
 1ac:	20 51       	subi	r18, 0x10	; 16
 1ae:	30 40       	sbci	r19, 0x00	; 0
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 2e       	mov	r0, r18
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_voidSetPin+0x122>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	0a 94       	dec	r0
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_voidSetPin+0x11e>
 1c0:	84 2b       	or	r24, r20
 1c2:	8c 93       	st	X, r24
 1c4:	56 c0       	rjmp	.+172    	; 0x272 <DIO_voidSetPin+0x1d8>
			}
			else if (value ==Low)
 1c6:	8a 81       	ldd	r24, Y+2	; 0x02
 1c8:	88 23       	and	r24, r24
 1ca:	09 f0       	breq	.+2      	; 0x1ce <DIO_voidSetPin+0x134>
 1cc:	52 c0       	rjmp	.+164    	; 0x272 <DIO_voidSetPin+0x1d8>
			{
				ClrBit(PORTC,pin_num-16);
 1ce:	a5 e3       	ldi	r26, 0x35	; 53
 1d0:	b0 e0       	ldi	r27, 0x00	; 0
 1d2:	e5 e3       	ldi	r30, 0x35	; 53
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	48 2f       	mov	r20, r24
 1da:	89 81       	ldd	r24, Y+1	; 0x01
 1dc:	88 2f       	mov	r24, r24
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	9c 01       	movw	r18, r24
 1e2:	20 51       	subi	r18, 0x10	; 16
 1e4:	30 40       	sbci	r19, 0x00	; 0
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 2e       	mov	r0, r18
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_voidSetPin+0x158>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	0a 94       	dec	r0
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_voidSetPin+0x154>
 1f6:	80 95       	com	r24
 1f8:	84 23       	and	r24, r20
 1fa:	8c 93       	st	X, r24
 1fc:	3a c0       	rjmp	.+116    	; 0x272 <DIO_voidSetPin+0x1d8>
			}
		}
	else if (24<=pin_num && pin_num<=31)
 1fe:	89 81       	ldd	r24, Y+1	; 0x01
 200:	88 31       	cpi	r24, 0x18	; 24
 202:	b8 f1       	brcs	.+110    	; 0x272 <DIO_voidSetPin+0x1d8>
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	80 32       	cpi	r24, 0x20	; 32
 208:	a0 f5       	brcc	.+104    	; 0x272 <DIO_voidSetPin+0x1d8>
		{ if(value == High)
 20a:	8a 81       	ldd	r24, Y+2	; 0x02
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	b9 f4       	brne	.+46     	; 0x23e <DIO_voidSetPin+0x1a4>
			{
				SetBit(PORTD,pin_num-24);
 210:	a2 e3       	ldi	r26, 0x32	; 50
 212:	b0 e0       	ldi	r27, 0x00	; 0
 214:	e2 e3       	ldi	r30, 0x32	; 50
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	48 2f       	mov	r20, r24
 21c:	89 81       	ldd	r24, Y+1	; 0x01
 21e:	88 2f       	mov	r24, r24
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	9c 01       	movw	r18, r24
 224:	28 51       	subi	r18, 0x18	; 24
 226:	30 40       	sbci	r19, 0x00	; 0
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 2e       	mov	r0, r18
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_voidSetPin+0x19a>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	0a 94       	dec	r0
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_voidSetPin+0x196>
 238:	84 2b       	or	r24, r20
 23a:	8c 93       	st	X, r24
 23c:	1a c0       	rjmp	.+52     	; 0x272 <DIO_voidSetPin+0x1d8>
			}
			else if (value == Low)
 23e:	8a 81       	ldd	r24, Y+2	; 0x02
 240:	88 23       	and	r24, r24
 242:	b9 f4       	brne	.+46     	; 0x272 <DIO_voidSetPin+0x1d8>
			{
				ClrBit(PORTD,pin_num-24);
 244:	a2 e3       	ldi	r26, 0x32	; 50
 246:	b0 e0       	ldi	r27, 0x00	; 0
 248:	e2 e3       	ldi	r30, 0x32	; 50
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	48 2f       	mov	r20, r24
 250:	89 81       	ldd	r24, Y+1	; 0x01
 252:	88 2f       	mov	r24, r24
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	9c 01       	movw	r18, r24
 258:	28 51       	subi	r18, 0x18	; 24
 25a:	30 40       	sbci	r19, 0x00	; 0
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	02 2e       	mov	r0, r18
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_voidSetPin+0x1ce>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	0a 94       	dec	r0
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_voidSetPin+0x1ca>
 26c:	80 95       	com	r24
 26e:	84 23       	and	r24, r20
 270:	8c 93       	st	X, r24
			}
		}

}
 272:	0f 90       	pop	r0
 274:	0f 90       	pop	r0
 276:	cf 91       	pop	r28
 278:	df 91       	pop	r29
 27a:	08 95       	ret

0000027c <DIO_u8GetPin>:
u8 DIO_u8GetPin(u8 pin_num)
{u8 value;
 27c:	df 93       	push	r29
 27e:	cf 93       	push	r28
 280:	00 d0       	rcall	.+0      	; 0x282 <DIO_u8GetPin+0x6>
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
 286:	8a 83       	std	Y+2, r24	; 0x02
	if (0<=pin_num && pin_num<=7)
 288:	8a 81       	ldd	r24, Y+2	; 0x02
 28a:	88 30       	cpi	r24, 0x08	; 8
 28c:	90 f4       	brcc	.+36     	; 0x2b2 <DIO_u8GetPin+0x36>
			{
				value=ReadBit(PINA,pin_num);
 28e:	e9 e3       	ldi	r30, 0x39	; 57
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	28 2f       	mov	r18, r24
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	8a 81       	ldd	r24, Y+2	; 0x02
 29a:	88 2f       	mov	r24, r24
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	a9 01       	movw	r20, r18
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <DIO_u8GetPin+0x2a>
 2a2:	55 95       	asr	r21
 2a4:	47 95       	ror	r20
 2a6:	8a 95       	dec	r24
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <DIO_u8GetPin+0x26>
 2aa:	ca 01       	movw	r24, r20
 2ac:	81 70       	andi	r24, 0x01	; 1
 2ae:	89 83       	std	Y+1, r24	; 0x01
 2b0:	4a c0       	rjmp	.+148    	; 0x346 <DIO_u8GetPin+0xca>
			}
	else if (8<=pin_num && pin_num<=15)
 2b2:	8a 81       	ldd	r24, Y+2	; 0x02
 2b4:	88 30       	cpi	r24, 0x08	; 8
 2b6:	b0 f0       	brcs	.+44     	; 0x2e4 <DIO_u8GetPin+0x68>
 2b8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ba:	80 31       	cpi	r24, 0x10	; 16
 2bc:	98 f4       	brcc	.+38     	; 0x2e4 <DIO_u8GetPin+0x68>
	{
		value=ReadBit(PINB,pin_num-8);
 2be:	e6 e3       	ldi	r30, 0x36	; 54
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	80 81       	ld	r24, Z
 2c4:	28 2f       	mov	r18, r24
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ca:	88 2f       	mov	r24, r24
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	08 97       	sbiw	r24, 0x08	; 8
 2d0:	a9 01       	movw	r20, r18
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_u8GetPin+0x5c>
 2d4:	55 95       	asr	r21
 2d6:	47 95       	ror	r20
 2d8:	8a 95       	dec	r24
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_u8GetPin+0x58>
 2dc:	ca 01       	movw	r24, r20
 2de:	81 70       	andi	r24, 0x01	; 1
 2e0:	89 83       	std	Y+1, r24	; 0x01
 2e2:	31 c0       	rjmp	.+98     	; 0x346 <DIO_u8GetPin+0xca>
	}
	else if (16<=pin_num && pin_num<=23)
 2e4:	8a 81       	ldd	r24, Y+2	; 0x02
 2e6:	80 31       	cpi	r24, 0x10	; 16
 2e8:	b0 f0       	brcs	.+44     	; 0x316 <DIO_u8GetPin+0x9a>
 2ea:	8a 81       	ldd	r24, Y+2	; 0x02
 2ec:	88 31       	cpi	r24, 0x18	; 24
 2ee:	98 f4       	brcc	.+38     	; 0x316 <DIO_u8GetPin+0x9a>
		{
			value=ReadBit(PINC,pin_num-16);
 2f0:	e3 e3       	ldi	r30, 0x33	; 51
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	80 81       	ld	r24, Z
 2f6:	28 2f       	mov	r18, r24
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	8a 81       	ldd	r24, Y+2	; 0x02
 2fc:	88 2f       	mov	r24, r24
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	40 97       	sbiw	r24, 0x10	; 16
 302:	a9 01       	movw	r20, r18
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_u8GetPin+0x8e>
 306:	55 95       	asr	r21
 308:	47 95       	ror	r20
 30a:	8a 95       	dec	r24
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_u8GetPin+0x8a>
 30e:	ca 01       	movw	r24, r20
 310:	81 70       	andi	r24, 0x01	; 1
 312:	89 83       	std	Y+1, r24	; 0x01
 314:	18 c0       	rjmp	.+48     	; 0x346 <DIO_u8GetPin+0xca>
		}
	else if (24<=pin_num && pin_num<=31)
 316:	8a 81       	ldd	r24, Y+2	; 0x02
 318:	88 31       	cpi	r24, 0x18	; 24
 31a:	a8 f0       	brcs	.+42     	; 0x346 <DIO_u8GetPin+0xca>
 31c:	8a 81       	ldd	r24, Y+2	; 0x02
 31e:	80 32       	cpi	r24, 0x20	; 32
 320:	90 f4       	brcc	.+36     	; 0x346 <DIO_u8GetPin+0xca>
		{
			value=ReadBit(PIND,pin_num-24);
 322:	e0 e3       	ldi	r30, 0x30	; 48
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	28 2f       	mov	r18, r24
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	8a 81       	ldd	r24, Y+2	; 0x02
 32e:	88 2f       	mov	r24, r24
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	48 97       	sbiw	r24, 0x18	; 24
 334:	a9 01       	movw	r20, r18
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_u8GetPin+0xc0>
 338:	55 95       	asr	r21
 33a:	47 95       	ror	r20
 33c:	8a 95       	dec	r24
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_u8GetPin+0xbc>
 340:	ca 01       	movw	r24, r20
 342:	81 70       	andi	r24, 0x01	; 1
 344:	89 83       	std	Y+1, r24	; 0x01
		}
	return value;
 346:	89 81       	ldd	r24, Y+1	; 0x01
}
 348:	0f 90       	pop	r0
 34a:	0f 90       	pop	r0
 34c:	cf 91       	pop	r28
 34e:	df 91       	pop	r29
 350:	08 95       	ret

00000352 <main>:
#include "DIO Driver/DIO_PRIV.h"
#include "DIO Driver/DIO_CONFIG.h"
#include "DIO Driver/DIO_INIT.h"

int main ()
{ DIO_voidInit();
 352:	df 93       	push	r29
 354:	cf 93       	push	r28
 356:	cd b7       	in	r28, 0x3d	; 61
 358:	de b7       	in	r29, 0x3e	; 62
 35a:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidInit>
	while (1)
	{
		if(DIO_u8GetPin(DIO_Pin_24)==High)
 35e:	88 e1       	ldi	r24, 0x18	; 24
 360:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_u8GetPin>
 364:	81 30       	cpi	r24, 0x01	; 1
 366:	49 f4       	brne	.+18     	; 0x37a <main+0x28>
		{
		DIO_voidSetPin(DIO_Pin_29,High);
 368:	8d e1       	ldi	r24, 0x1D	; 29
 36a:	61 e0       	ldi	r22, 0x01	; 1
 36c:	0e 94 4d 00 	call	0x9a	; 0x9a <DIO_voidSetPin>
		DIO_voidSetPin(DIO_Pin_30,Low);
 370:	8e e1       	ldi	r24, 0x1E	; 30
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	0e 94 4d 00 	call	0x9a	; 0x9a <DIO_voidSetPin>
 378:	f2 cf       	rjmp	.-28     	; 0x35e <main+0xc>
		}
		//_delay_ms(1000);
		else if (DIO_u8GetPin(DIO_Pin_25)==High)
 37a:	89 e1       	ldi	r24, 0x19	; 25
 37c:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_u8GetPin>
 380:	81 30       	cpi	r24, 0x01	; 1
 382:	69 f7       	brne	.-38     	; 0x35e <main+0xc>
		{
		DIO_voidSetPin(DIO_Pin_30,High);
 384:	8e e1       	ldi	r24, 0x1E	; 30
 386:	61 e0       	ldi	r22, 0x01	; 1
 388:	0e 94 4d 00 	call	0x9a	; 0x9a <DIO_voidSetPin>
		DIO_voidSetPin(DIO_Pin_29,Low);
 38c:	8d e1       	ldi	r24, 0x1D	; 29
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	0e 94 4d 00 	call	0x9a	; 0x9a <DIO_voidSetPin>
 394:	e4 cf       	rjmp	.-56     	; 0x35e <main+0xc>

00000396 <_exit>:
 396:	f8 94       	cli

00000398 <__stop_program>:
 398:	ff cf       	rjmp	.-2      	; 0x398 <__stop_program>
